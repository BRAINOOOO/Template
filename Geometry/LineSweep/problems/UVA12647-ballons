Problem: UVA 12647
Problem: given n segments that has no any common points and points at y=0 axis and each point will move up in stright line if it hit some
segment it will go to its up side and slides and continue to move up if it meets some horizontal segment it will stuck there.
out put the final position of every point in the floor and if it goes to inf y out put only the x-axis.
Solution: First of all i need to get the next segment i will move to from each point on the floor and each point have a higher y-axis 
of each segment okay i will use line sweep tech to do so first of all you may observe that if i stand at a current point with a certain x 
value all the segments that already started and ended for sure won't be my next and if i have the same x i will let the start to be first
then the point on the floor then end and if it has the same type i will let the down point to be first.
Code wise
i will sort on x-axis then type then kind and at each x value i will interpolate all the segments i currently have with respect to the 
current x value.
Then the last part doesn't relate much to line sweep i will just calculate the answer for each segment recursively using solve function.
CODE
----
const int N=500009;
struct Pt 
{
    int x, y;
    Pt(int a = 0, int b = 0)
    {
    	x=a; y=b;
    }
    bool operator<(const Pt &a) const {
        if(x != a.x)	return x < a.x;
        return y < a.y;
    }
	Pt operator-(const Pt &a) const {
        return Pt(x - a.x, y - a.y);
    }
};
typedef struct Seg 
{
	Pt s, e;
	int id;
	Seg(Pt a , Pt b , int c)
	{
		s=a; e=b; id=c;
	}
 
}SS;
struct Endpoint {
	int x, s, id, qkind;
	Endpoint(int a = 0, int b = 0, int c = 0, int d = 0)
	{
		x=a; s=b; id=c; qkind=d;
    }
 
	bool operator<(const Endpoint &a) const {
		if (x != a.x)	return x < a.x;
		if (s != a.s)	return s > a.s;
		return qkind < a.qkind;
	}
};
struct CMP 
{
	static int x;
 
	double interpolate(const Pt& p1, const Pt& p2, int& x) {
        if (p1.x == p2.x) return p1.y;
        return p1.y + (double)(p2.y - p1.y) / (p2.x - p1.x) * (x - p1.x);
    }
 
	bool operator() (const Seg &i, const Seg &j) {
		return interpolate(i.s, i.e, x) < interpolate(j.s, j.e, x);
	}
};
int q,n;
vector< Endpoint > event;
set< SS,CMP > S;
int touch[N],nxt[N];
vector< Pt > ans(N);
vector<Seg> seg;
int x1,x2,yy1,y2;
int Q[N];
Pt solve(int id,int prex)
{
    if(ans[id].x!=-2)
        return ans[id];
 
    if(nxt[id]==-1&&seg[id].s.y==seg[id].e.y)
    {
        return Pt(prex,seg[id].s.y);
    }
     int myx;
    if(seg[id].s.y>seg[id].e.y)
        myx=seg[id].s.x;
    else
        myx=seg[id].e.x;
 
    if(nxt[id]==-1)
    {
        return ans[id]=Pt(myx,-1);
    }
    return ans[id]=solve(nxt[id],myx);
 
}
int CMP::x = 0;
void linesweep()
{
    int cnt=0;
    for(int i=0;i<n;i++)
    {
        if(seg[i].e<seg[i].s)
        {
            swap(seg[i].s,seg[i].e);
        }
        int s1=seg[i].s.y>seg[i].e.y;
        event.pb({seg[i].s.x,1,i,s1});
 
        int s2=seg[i].s.y<seg[i].e.y;
 
        event.pb({seg[i].e.x,-1,i,s2});
 
    }
 
    for(int i=0;i<q;i++)
    {
        event.pb({Q[i],1,i,2});
    }
 
    sort(all(event));
    set<Seg, CMP>::iterator it, jt, kt;
    for(int i=0;i<sz(event);i++)
    {
        CMP::x = event[i].x;
		if (event[i].qkind == 2)
        {
			 it = S.begin();
			if (it != S.end())
				touch[event[i].id] = it->id;
			continue;
		}
		if (event[i].qkind == 1)
        {
			 it = S.upper_bound(seg[event[i].id]);
 
			if (it != S.end() && it->id != event[i].id)
				nxt[event[i].id] = it->id;
 
		}
		if (event[i].s == 1) 
        {
			S.insert(seg[event[i].id]);
		} 
		else 
		{
			auto it = S.lower_bound(seg[event[i].id]);
			if(it != S.end())	S.erase(it);
		} 
    }
    for(int i=0;i<n;i++)
        solve(i,-1);
    for(int i=0;i<q;i++)
    {
        if(touch[i]==-1)
            cout<<Q[i]<<endl;
        else if(seg[touch[i]].s.y==seg[touch[i]].e.y)
            cout<<Q[i]<<" "<<seg[touch[i]].s.y<<endl;
        else
        {
            int idx=touch[i];
            if(ans[idx].y==-1)
                cout<<ans[idx].x<<endl;
            else
                cout<<ans[idx].x<<" "<<ans[idx].y<<endl;
        }
    }
}
void I()
{
	event.clear();
	seg.clear();
    S.clear();
    ans.resize(N);
    clr(nxt,-1);
    clr(touch,-1);
    for(int i=0;i<N;i++)
        ans[i]=Pt(-2,-2);
}
int main()
{
    while(cin>>n>>q)
    {
        I();
        for(int i=0;i<n;i++)
        {
            cin>>x1>>yy1>>x2>>y2;
            seg.pb(Seg(Pt(x1,yy1),Pt(x2,y2),i));
        }
        for(int i=0;i<q;i++)
            cin>>Q[i];
        linesweep();
    }
}
