-suppsose you are given a polygon and you want to know whether a given point inside the polygon or not.
Solution 1
-works for convex and concave polygons.
-O(n)
the idea is to do horizontal line to the +ve x-axies if the line passes by edge going down so yu will count -1 but if the edge going up
yu will count +1 but you have to check that it doesn't passes by another horizontal line.
CODE
----
bool isPointOnSegment(point a, point b, point c)
{
	double acb = length(a-b), ac = length(a-c), cb = length(b-c);
	return dcmp(acb-(ac+cb), 0) == 0;
}

// Accurate and efficient
int isInsidePoly(vector<point> p, point p0) 
{
  int wn = 0;  // the winding number counter

  for (int i = 0; i < sz(p); i++)
  {
	point cur = p[i], nxt = p[(i + 1) % sz(p)];
	
	if (isPointOnSegment(cur, nxt, p0))    // instead you can make this check if (ccw(cur, nxt, pt) == 0)return 1;
	  return true;
	if (cur.Y <= p0.Y) 
	{                                                 // Upward edge
	  if (nxt.Y > p0.Y && cp(nxt-cur, p0-cur) > EPS)
		++wn;
	} 
	else 
	{                                                 // Downward edge
	  if (nxt.Y <= p0.Y && cp(nxt-cur, p0-cur) < -EPS)
		--wn;
	}
  }
  return wn != 0;
}

Notes
- in case there is much queries you can first create a rectangle around the polygon and check if its inside it so go and check 
for polygon else don't check for the polygon.
----------------------------------------------------------------------------------------------------------------------------------------
-solution 2
-works for convex polygons only
-O(logN)
Notes about code
the idea: if i picked the point with the min x and if there is many with min y then all the polygon will be on my right side i can 
sweep in a radical motion counter-clock wise direction considering any other point with unti-clockwise order as an event, so for 
every query point i will take its angle and binarysearch on the upper and lower angle the point must be between them so i will
check that.

Tricks
1- here the angle between orgin and (x,y) point is atan2(y,x) okay true but here i am dealing in double domain, we can work in integer
domain by some obsrvation y1/x1 > y2/x2 the angle of y1/x1 must be larger too so it is just a comparsion between y1/x1 and y2/x2 
and it can be done by y1*x2+y2*x1 equation so we could sort the points according to their angles without precision errors.

CODE
----
struct point 
{
	int x, y;
};

struct ang 
{
	int a, b;
};

bool operator <(const ang & p, const ang & q) {
	if (p.b == 0 && q.b == 0)
		return p.a <q.a;
	return p.a * 1ll * q.b <p.b * 1ll * q.a;
}

long long cross (pt & a, pt & b, pt & c) 
{
	return a.x * 1ll * (b.y-c.y) + b.x * 1ll * (c.y-a.y) + c.x * 1ll * (a.y-b.y);
}

int main () 
{
	int n;
	cin >> n;
	vector <pt> p (n);
	int zero_id = 0;
	for (int i = 0; i <n; ++ i) 
    {
		scanf ("%d %d", & p[i].x, & p[i].y);
		if (p[i].x < p[zero_id].x || p[i].x == p[zero_id].x && p[i].y < p[zero_id].y)
			zero_id = i;
	}
	pt zero = p [zero_id];
	rotate (p.begin (), p.begin () + zero_id, p.end ());
	p.erase (p.begin ());
	--n;

	vector <ang> a(n);
	for (int i = 0; i <n; ++ i) 
    {
		a[i].a = p[i].y - zero.y;
		a[i].b = p[i].x - zero.x;
		if (a[i].a == 0)
			a[i].b = a[i].b <0? -eleven;
	}
	int Q;
    cin>>Q; // queries
    int x,y;
	for (;Q--;) 
    {
		point q; // next request
        cin>>x>>y;
        q.x=x; q.y=y;
		bool in = false;
		
		if (q.x> = zero.x)
			if (q.x == zero.x && q.y == zero.y)
				in = true;
			else 
            {
				ang my = {q.y-zero.y, q.x-zero.x};
				
				if (my.a == 0)
					my.b = my.b <0? -eleven;
				vector <ang> :: iterator it = upper_bound (a.begin (), a.end (), my);
				if (it == a.end () && my.a == a[n-1].a && my.b == a[n-1] .b)
					it = a.end () - 1;
				if (it! = a.end () && it! = a.begin ()) {
					int p1 = int (it - a.begin ());
					if (cross (p[p1], p[p1-1], q) <= 0)
						in = true;
				}
			}
		cout<< (in? "INSIDE": "OUTSIDE");
	}

}
-----------------------------------------------------------------------------------------------------------------------------------------















































