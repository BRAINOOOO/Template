Problem: you are given n points in 2d plane and m circles and i want the count of connected components a point is conncected to a point
if it can see it without any circles in between.
Solution: okay the part of the connected components could be done with dfs after building the graph, now the point is how i could
buil the graph there is n^3 way which is to pick a point and check for all the other points whether there is a circle in between or not 
but this will TLE, so the other way will be by radical sweep, i will pick a point then for each other point will record its angle relative
to it and sort by angles, then for each circle i will get the points in their range of angles and check if it is not seen or not if its 
not seen will mark that it won't be seen, then i will do dfs normally.

Learnings:
1- cos(theta) will be >0 if angle acute and =0 if its right and <0 if its abtuse.
2- the line from center of circle to its tangent point will make 90 degree with tangent line.

CODE
----
const int N=1009;
int T,m,n;
struct point
{
    int x,y;
    point(int a=0,int b=0)
    {
        x=a; y=b;
    }
    point operator-(const point &p)const
    {
        return point(x-p.x,y-p.y);
    }
};
point p[N],C[N];
int R[N];
bool arr[N][N];
double dist(point a,point b)
{
    return sqrt((b.x-a.x)*(b.x-a.x)+(b.y-a.y)*(b.y-a.y));
}
int dp(point a,point b)
{
    return a.x*b.x+a.y*b.y;
}
void buildgraph()
{

    for(int i=0;i<n;i++)
    {
         vector< pair<double,int> > A;
        for(int j=0;j<n;j++)
        {
            if(i==j)
                continue;
            int ny= p[j].y-p[i].y;
            int nx= p[j].x-p[i].x;
            A.pb(mp(atan2(ny,nx),j));
        }

        sort(all(A));

        for(int j=0;j<m;j++)
        {
            double theta= atan2(C[j].y-p[i].y,C[j].x-p[i].x);
            double alpha= asin(R[j]/dist(p[i],C[j]));
            double Lf= theta-alpha;
            double Rg=theta+alpha;

           int str= lower_bound(all(A),mp(Lf,-1))-A.begin();
            for(int k=str;k<sz(A)&&dcmp(A[k].first,Rg)<=0;k++)
            {

                if((dp((p[i]-p[A[k].second]),C[j]-p[A[k].second])>0)||(dcmp(dist(p[A[k].second],C[j]),R[j])<=0))
                    arr[i][A[k].second]=1,arr[A[k].second][i]=1;
            }
        }
    }
}
bool vis[N];
void I()
{
    clr(arr,0);
    clr(vis,0);
}
void dfs(int no)
{
    vis[no]=1;
    for(int i=0;i<n;i++)
    {
        if(vis[i]||arr[no][i]!=0)
            continue;
        dfs(i);
    }
}
int main()
{
    cin>>T;
    while(T--)
    {
        I();
        cin>>n>>m;
        int x,y;
        for(int i=0;i<n;i++)
        {
            cin>>x>>y;
            p[i]=point(x,y);
        }
        int r;
        for(int i=0;i<m;i++)
        {
            cin>>x>>y>>r;
            C[i]=point(x,y);
            R[i]=r;
        }
        buildgraph();
        int cnt=0;
        for(int i=0;i<n;i++)
        {
            if(vis[i]==0)
            {
                cnt++;
                dfs(i);
            }
        }
        cout<<cnt-1<<endl;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------

