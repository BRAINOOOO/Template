Problem: you are give a 2d grid and k circles and every circle have a weight p all the cells included in this cell will have this weight
too and i need to get the max weight value a cell can have in this grid and the number of such cells.

Solution: if i moved from the begining of a circle to its end at x-cordinate only at each point i need to get  to what range in y-cordinate 
should i consider and this can be caluculated by getting the distance from x of center and current point and radius so i will calculate 
that and mark in 2-d array then the rest is accumlations.

CODE
----
ll arr[30009][1009];
int main()
{
	M();
    int n,m,k;
    cin>>m>>n>>k;
    int x,y,r,p;
    for(int i=0;i<k;i++)
    {
        cin>>y>>x>>r>>p;
        x--;
        y=n-y;
        int L=max(0,x-r);
        int R=min(m-1,x+r);
        for(int j=L;j<=R;j++)
        {
            int d= abs(j-x);
            int diff= sqrt(r*r-d*d)+eps;
            arr[j][max(0,y-diff)]+=p;
            arr[j][min(n,y+diff+1)]-=p;
        }
    }
    for(int i=0;i<m;i++)
    {

        for(int j=1;j<n;j++)
            arr[i][j]+=arr[i][j-1];
    }
    int mx=0,cnt=0;
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(arr[i][j]>mx)
            {
                mx=arr[i][j];
                cnt=1;
            }
            else if(arr[i][j]==mx)
                cnt++;
        }
    }
   cout<<mx<<endl<<cnt<<endl;
}
----------------------------------------------------------------------------------------------------------------------------------------
