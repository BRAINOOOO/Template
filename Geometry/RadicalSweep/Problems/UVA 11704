Problem: you are given n points in a 2d plane and assume that all the points are in circle its center is the orgin (0,0) and you are 
required to cut this circle by a line passes through the center so that there is equal points at each region out put whether its possible
or not.
Notes about problem
1- no pair of points are aligned with the orgin.
Notes about solution
1- remeber that the tan is pos at 1,3 quadand neg at 2,4 quad so to make a line take care of values of angles
2- i will take the smallest angle point to be my reference in the begining bec it will be okay with the values of tan in 4 quads
   draw the angles of tan and yu will know, then i will construct first the first cut then by using dot product i will get the rest of
   cuts.
CODE
----
const int N=30009;
struct point
{
    double x,y;
    int id;
    point(double a=0.0,double b=0.0,int c=0)
    {
        x=a; y=b; id=c;
    }
    bool operator<(const point &e)const
    {
        return (x<e.x||(x==e.x&&y<e.y));
    }
};
point p[N];
double cross(point a,point b,point c)
{
    return (c.y-b.y)*(b.x-a.x)-(b.y-a.y)*(c.x-b.x);
}
double fix(double x)
{
    if(dcmp(x,0)<0)
        x+=2*PI;
    if(dcmp(x,2*PI)>=0)
        x-=2*PI;
    return x;
}
bool radicalsweep(int n,int a,int b)
{
    a/=2;
    b/=2;
    int cntA=0,cntB=0;
    point O=point(0,0,0);
    if(p[0].id==0)
        cntA++;
    else
        cntB++;
    int cut=0;
    for(int i=1;i<n;i++)
    {
        if(cross(O,p[0],p[i])>0)
        {
            if(p[i].id==0)
                cntA++;
            else
                cntB++;
        }
        else
        {
            cut=i;
            break;
        }
    }
    if(cntA==a&&cntB==b)
            return 1;
    for(int i=1;i<n;i++)
    {
        if(p[i-1].id==0)
            cntA--;
        else
            cntB--;
        if(cross(O,p[i-1],p[i])<=0)
        {
            if(p[i].id==0)
                cntA++;
            else
                cntB++;
        }
        while(cross(O,p[i],p[cut])>0)
        {
            if(p[cut].id==0)
                cntA++;
            else
                cntB++;
            cut=(cut+1)%n;
        }
        if(cntA==a&&cntB==b)
            return 1;

    }
  return 0;
}
int main()
{
    int a,b;
    while(cin>>a>>b)
    {
        if(a==-1&&b==-1)
            break;
        int n=0;
        double x,y;
        for(int i=0;i<a;i++)
        {
            cin>>x>>y;
            p[n++]=point(x,y,0);
        }

        for(int i=0;i<b;i++)
        {
            cin>>x>>y;
            p[n++]=point(x,y,1);
        }
        vector< pair<double,point> > A;
        for(int i=0;i<n;i++)
        {
            A.pb(mp(atan2(p[i].y,p[i].x),p[i]));
        }

        sort(all(A));

        for(int i=0;i<n;i++)
            p[i]=A[i].second;

        cout<<(radicalsweep(n,a,b)==0? "NO\n":"YES\n");
    }
}

----------------------------------------------------------------------------------------------------------------------------------------

