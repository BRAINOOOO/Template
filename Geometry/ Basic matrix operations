Note ( observation )

if i have a nxn matrix A and i want to get A^2 which is equal to A*A let B= A*A to get each element in B it depends on some elements 
in A,

     11 12 13    
     21 22 23    imagine second element at row 1 and column 2 thats why i wrote 12, to get the second element at matrix B observe tha  
     31 32 33                   11 12
                  you depend on 12 22 so if i make an edge between the number of row and the number of column of each element i will  
                                13 32
                  have an edge between 1 and 2 which is the row and column of the element i want.
----------------------------------------------------------------------------------------------------------------------------------------
typedef vector< double > row;
typedef vector< row > matrix;
-----------------------------------------------------------------------------------------------
// all of it zero
matrix Zero( int n,int m)
{
    return matrix(n,row(m,0));
}
---------------------------------------------------------------------------------------------------
// all of it zero except for the diagonal it is equal to one, must be a square matrix
// identitiy matrix is like a one when it is multiplied by a matrix it doesn't affect and 
//when its added to a matrix it affects
matrix Idenditiy(int n)
{
    matrix I=Zero(n,n);
    
    for(int i=0;i<n;i++)
        I[i][i]=1;
    return I;
}
------------------------------------------------------------------------------------------------------
// matrix trace is the sum of the diagonal of the matrix ( to have a diagonal it must be square matrix
int matrixtrace(matrix m)
{
    double ret=0;
    for(int i=0;i<sz(m);i++)
       ret+= m[i][i];
    return ret;
     
}     
-------------------------------------------------------------------------------------------------
// matrix clockwise rotation 
matrix matrixrotateCW(matrix m)
{
    
    matrix ret=Zero(sz(m[0]),sz(m));
    
    for(int i=0;i<sz(m);i++)
        for(int j=0;j<sz(m[0]);j++)
         ret[j][sz(m)-1-i]=m[i][j];
    
    return ret;
}
----------------------------------------------------------------------------------------------------
// matrix reflection 
matrix matrixreflection(matrix m)
{
    matrix ret=Zero(sz(m),sz(m[0]));
    
    for(int i=0;i<sz(m);i++)
        for(int j=0;j<sz(m[0]);j++)
         ret[i][sz(m[0])-1-j]=m[i][j];
    
    return ret;
}
--------------------------------------------------------------------------------------------------------
// addition of two matrixes
// but they must have the same number of rows and columns
matrix matrixaddition(matrix a,matrix b)
{
    
    matrix res=Zero(sz(a),sz(a[0]));
    
    for(int i=0;i<sz(a);i++)
        for(int j=0;j<sz(a[0]);j++)
         res[i][j]=a[i][j]+b[i][j];
    
    return res;
}
--------------------------------------------------------------------------------------------------------------
// addition of identity matrix to a matrix 
// like matrix + 1

matrix addIdentity(matrix m)
{
    matrix ret=m;
    
    for(int i=0;i<sz(m);i++)
        ret[i][i]+=1;
    
    return ret;
}
----------------------------------------------------------------------------------------------------------------
// matrix multiplication 
// there are rules to do so
// 1- the first matrix columns must be equal to second matrix rows
// the resultant matrix will have the first matrix rows as rows and second matrix column as a column
// cell (i,j) will be the sum of mutiplication of first matrix ith row and second matrix jth column
// O( n^3 )
// there are 2 tricks to optimaize the complexity
// 1- if a most of it zeros so do if condition before the last loop to check if ( a[i][k] ==0) continue;
//    and if b most of it zeros so swap the last 2 loops and do the check but on b[k][j].
matrix multiplication(matrix a,matrix b)
{
    matrix res=Zero(sz(a),sz(b[0]));
    
    for(int i=0;i<sz(a);i++)
    {
        for(int k=0;k<sz(a[0]);k++)
        {
            for(int j=0;j<sz(b[0]);j++)
             res[i][j]+= a[i][k]*b[k][j];
            
        }
    }
    
    return res;
}
--------------------------------------------------------------------------------------------------------------------
// power of matrix
matrix powermatrix(matrix a , k)
{
    i
