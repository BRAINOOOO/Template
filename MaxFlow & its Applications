/*
Max flow
- augmenting path means a pathin the flow.
- we are talking a bout a directed graph each edge represent a road with a certain capicity ( imagine it like a pipe ).
- we have a source(S) and a desitination called sink.
- the difference between path and flow that the flow consists of one or more paths from source to destination.
- MaxFlow means the max flow of water for example from a source to the destination through the edges(pipes), In other words the max
amount of water to reach the destination from the source.

Min Cut
- its like if i have a directed graph and i need sepreate all the ways from the Source to the destination by breaking some edges and 
every edge have a cost to be breaked and i want to do that with the min cost.

- the Min Cut problem is the same as the Maxflow problem problem, bec the if there is a edge from 1 to 2 with weight 4 and from 2 to 3 
with weight 10 the water that will pass is the min between them which is 4 and the min cut is also 4.

Implementation
By Ford-Fulkerson's method
Steps
-find a path from source to destination then all the edges used in that path subtract them from the min of that path edges and add
this min edge cost to the reverse edge.
Explanation
it is like moving in a path and the reverse edge represents the cancelation of a certain move and taking other move instead.
Complexity O( maxflow*Edges )
CODE
#define MAXN 700     		//maximum number of nodes
int cap[MAXN][MAXN]; 		//capacity
int n;						//number of nodes
int path[MAXN];
int pathLength;
bool visited[MAXN];

// Implement in anyway that get a path: DFS, BFS, Dijkstra...whatever
int getPath(int StartNode,int TargetNode,int curLen,int maxcap)
{
	path[curLen]=StartNode;
	if (StartNode==TargetNode) 
	{
		pathLength=curLen+1;
		return maxcap;
	}
	
	int ret = 0;
	visited[StartNode]=true;
	
	for(int i=0;i<n;i++)
	{		
		if (visited[i] || cap[StartNode][i]<=0) continue;
		
		ret = getPath(i, TargetNode,curLen+1, min(maxcap,cap[StartNode][i]));
		
		if (ret>0) break;	// We found a path with flow
	}
	return ret;
}

int maxFlow(int src, int sink)
{
	int total_flow = 0;

	while(1)
	{
		memset(visited,0,sizeof(visited));
		int newflow=getPath(src,sink,0,INT_MAX);
		
		if (!newflow) break;	// once no more paths, STOP
		
		for(int i=1;i<pathLength;i++)
		{
			int m=path[i-1],n=path[i];
			
			cap[m][n]-=newflow;
			cap[n][m]+=newflow;		// Add reversed edge
		}
		total_flow+=newflow;
	}
	
	return total_flow;
}
----------------------------------------------------------------------------------------------------------------------------------------
Max Flow Applications

1- MaxEdgeDisjointPath ( the max number of paths from source to destination that doesn't share any edges )
To solve it, put all the weights with 1 then run MaxFlow and the amount of flows is the amount of paths 
---------------------------------------------------------------------------------------------------------------------------------------
2-MaxEdgeAndVertexDisjointPath ( the max number of paths from source to destination that doesn't share any edges and any vertexes )
To solve it,first put all the weights with 1 and mark all the vertexes with one then run MaxFlow but don't go through node which is 
marked with zero or edge marked with zero and the amount of flows is the amount of paths 
---------------------------------------------------------------------------------------------------------------------------------------
3- What if the Capicity is on the vertexes
Simply split each vertex i to i and V+i ( V is the number of vertexes ) and put an edge between them with the cost that on the vertex 
so any edge to that vertex will be directly to it but each vertex that is out from it will be out from V+i vertex then run MaxFlow 
normally.
---------------------------------------------------------------------------------------------------------------------------------------
3-MultiSourceMultiSink 
simpily take a fake Supersource vertex and connect it to all the sources you have with weight on edges inf and take a fake Supersink 
vertex and connect it to all the sinks you have with weight on edges inf, then run MaxFlow normally
---------------------------------------------------------------------------------------------------------------------------------------
MaxFlow with Bipartite graph
- The edges between the bipartite graph is a relation is not directed or not 
-A Tree is always can be expressed as a Bipartite graph 
-At the chess board the kight move in 2 steps in direction A then 1 step in direction B where A and B must be perpendicular 
to each other, so it always attack the colour which is the opposite to it so all the edges from it goes to the other colour and never 
goes to the same colour So the knight graph is a bipartite where the black cells are in a side and the white ones in the other side.
--------------------------------------------------------------------------------
4- MaxBipartiteMatching ( means i want the max pair-wise relations between the 2 parts of the bipartite graph )
Simpily,its like multiSourceMultiSink idea.
----------------------------------------------------------------------------------------------------------------------------------------
5-MinPathCoverage in DAG ( means the min paths that not sharing any edges to cover all the graph nodes at least one time )
its idea based on konig's theroem.
Konig's theroem
states that In a bipartite graph the minminum number of nodes covering all the edges Equals to the number of the Indepentant edges in
the graph.

-The coming CODE gets the number of min nodes covering all the edges which is equal to the number of the Indepentant edges in the graph.
-But to get the MinPathCoverag
let the Indepentant edges E each one  definintely connects two unique nodes so the nodes covered by them is E*2 and let all the nodes 
exist on both sides N so there is N-E*2 nodes not covered and each will cost a seprate extra path to be covered so all the paths will
be N-E*2+E = N-E.

CODE
vector< vector<int> > v ;
vector< pair<int, int> > matches;
bool canMatch(vector< vector<int> > & adjMax, vector<int> & vis, vector<int> & L, vector<int> & R, int i) // O(m*n)
{
	for(int j=0;j<sz(adjMax[i]);j++)
	{

        if(adjMax[i][j] && !vis[j])
        {
		 vis[j] = 1;
		  if( L[j] < 0 || canMatch(adjMax, vis, L, R, L[j]) )
		  {
			L[j] = i, R[i] = j;
			return true;
		   }
	     }
	}
	return false;
}

int bipartiteMatching(vector< vector<int> > adjMax)
{	// Return two lists of maximum matching indices in O(m*n^2).
	int maxFlow = 0, n = sz(adjMax), m = sz(adjMax[0]);
	vector<int> vis, L(n, -1), R(m, -1);
	for(int i=0;i< n;i++)
       {
		vis = vector<int>(n, 0);
		if( canMatch(adjMax, vis, L, R, i)  )
			maxFlow++;
	}
	// Construct the matching, 0-based.

	lp(i, n) if(R[i] != -1)
		matches.push_back( make_pair(i, R[i]) );

	return maxFlow;    // is the E
}
int main()
{
    int n,m;
    cin>>n>>m;
   int x,y;
   v.resize(n);
    for(int i=0;i<n;i++)
    v[i].resize(n);
    for(int i=0;i<m;i++)
     {
         cin>>x>>y;
        x--; y--;
        v[x][y]=1;
     }
   cout<< N-bipartiteMatching(v) <<endl;     // N represents all the nodes in both sides of the bipartite graph

   for(int i=0;i<sz(matches);i++)
    cout<<matches[i].first<<" "<<matches[i].second<<endl;
}
---------------------------------------------------------------------------------------------------------------------------------------
5-FindMinCutEdges ( means the edges that i will sepreate by it between the source and sink )
idea off course at the end those edges will be equal to zero after running the max flow so first i will run max flow then i will run
dfs entering only the edges which is not zero.
CODE
void flood_fill(int src)
{
	visited[src] = 1;
	for (int i = 0; i < n; i++)
		if (!visited[i] && cap[src][i]>0)
			flood_fill(i);
}

struct edge
{
	int from, to;
	edge(){}
	edge(int f, int t)
	{
		from = f, to = t;
	}
};
edge e[501];
void main()
{
	int i, j, links;
	   cin>>n>>links ;
		for(i=0;i<links;i++)
		{
			int a,b,c;
			cin>>a>>b>>c;
			cap[a-1][b-1] = cap[b-1][a-1] =  c;
			e[i] = edge(a-1, b-1);
		}
		int max_ = maxFlow();
		//cout<<max_<<"\n";

		memset(visited, 0, sizeof(bool)*n);

		/* find all nodes reachable from src */
		flood_fill(src);
		for (i = 0; i < links; i++)
		{	/* any edge that is reachable from u but not v is mincut edge */
			if( visited[ e[i].from ] && !visited[ e[i].to ])
				cout<<e[i].from+1<<" "<<e[i].to+1<<"\n";
			else if( visited[ e[i].to ] && !visited[ e[i].from ] )
				cout<<e[i].from+1<<" "<<e[i].to+1<<"\n";
		}
		cout<<"\n";
}
----------------------------------------------------------------------------------------------------------------------------------------


























































































































































