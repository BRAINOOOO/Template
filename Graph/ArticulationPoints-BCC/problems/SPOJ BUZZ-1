Explantion: the idea is to get the BCC in the block cut tree and to match between them and the Buzzes to get the min max value
this part can be done by Dp with knapsac trick.

CODE
----
#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask)     {mask &= (mask-1);++ret;    }return ret;}
const int N=251+9;
const int M=100009;
int S[N],timer,dfsN[N],lwlink[N];
vector< vector< pair<int,int> > > v,fcomp;
stack< pair<int,int> > stk;
vector< int > v1,v2;
int mem[N][N],vis[M],vis2[N];
bool member[N];
void I()
{
   timer=1;
   clr(dfsN,0);
   clr(lwlink,0);
   v.clear();
   v.resize(N);
   v1.clear();
   v2.clear();
   clr(mem,-1);
   clr(member,0);
   clr(vis,0);
   clr(vis2,0);
   fcomp.clear();
 
}
void dfs(int no)
{
    dfsN[no]=lwlink[no]=timer++;
    for(int i=0;i<sz(v[no]);i++)
    {
        int nw= v[no][i].first;
        int id=v[no][i].second;
        if(vis[id])
            continue;
        vis[id]=1;
        stk.push(mp(no,nw));
        if(dfsN[nw]==0)
        {
            dfs(nw);
            lwlink[no]=min(lwlink[no],lwlink[nw]);
            if(lwlink[nw]>=dfsN[no])
            {
                vector< pair<int,int> > comp;
                int f,s;
                do
                {
                    f=stk.top().first;
                    s=stk.top().second;
                    comp.pb(mp(f,s));
                    stk.pop();
 
                }while(!(f==no&&s==nw));
                fcomp.pb(comp);
            }
        }
        else
            lwlink[no]=min(lwlink[no],dfsN[nw]);
    }
}
 
int solve(int i,int j)
{
    if(i==sz(v1))
    {
        return 0;
    }
    if(j==sz(v2))
    {
        return INT_MAX;
    }
    int &ret=mem[i][j];
    if(ret!=-1)
        return ret;
 
    int p1=solve(i,j+1);
    int diff=abs(v1[i]-v2[j]);
    int p2=max(diff,solve(i+1,j+1));
 
    return ret=min(p1,p2);
}
 
int main()
{
    int T;
    scanf("%d",&T);
    int cs=1;
    while(T--)
    {
        I();
       int n,m,B;
       scanf("%d",&n);
       scanf("%d",&m);
       scanf("%d",&B);
       int cntcomp=0;
       for(int i=1;i<=n;i++)
       {
           scanf("%d",&S[i]);
       }
       int no;
       for(int i=0;i<B;i++)
       {
           scanf("%d",&no);
           v2.pb(no);
       }
       int f,t;
       for(int i=0;i<m;i++)
       {
           scanf("%d",&f);
           scanf("%d",&t);
           v[f].pb(mp(t,i));
           v[t].pb(mp(f,i));
       }
 
       for(int i=1;i<=n;i++)
       {
           if(sz(v[i])==0)
            {
                v1.pb(S[i]);
                cntcomp++;
            }
       }
       for(int i=1;i<=n;i++)
       {
           if(dfsN[i]==0)
            dfs(i);
       }
 
 
        for(int i=0;i<sz(fcomp);i++)
        {
            int edges=sz(fcomp[i]);
            for(int j=0;j<sz(fcomp[i]);j++)
            {
                int f=fcomp[i][j].first;
                int s=fcomp[i][j].second;
 
                if(edges>1)
                {
                    member[f]=1;
                    member[s]=1;
                }
            }
        }
        clr(vis,0);
        for(int i=0;i<sz(fcomp);i++)
        {
            int edges=sz(fcomp[i]);
            int sum=0;
 
            for(int j=0;j<sz(fcomp[i]);j++)
            {
                int f=fcomp[i][j].first;
                int s=fcomp[i][j].second;
                vis[f]++;
                vis[s]++;
                if(vis[f]==1)
                {
                    sum+=S[f];
                }
                if(vis[s]==1)
                {
                    sum+=S[s];
                }
            }
            if(edges>1)
            {
                v1.pb(sum);
                cntcomp++;
            }
            if(edges==1)
            {
                int f=fcomp[i][0].first;
                int s=fcomp[i][0].second;
                if(member[f]==0&&vis2[f]==0)
                {
                    vis2[f]=1;
                    v1.pb(S[f]);
                    cntcomp++;
                }
                if(member[s]==0&&vis2[s]==0)
                {
                    vis2[s]=1;
                    v1.pb(S[s]);
                    cntcomp++;
                }
            }
            for(int j=0;j<sz(fcomp[i]);j++)
            {
                int f=fcomp[i][j].first;
                int s=fcomp[i][j].second;
 
                vis[f]--;
                vis[s]--;
            }
        }
        sort(all(v1));
        sort(all(v2));
 
 
         if(B>=cntcomp)
         {
          int res=solve(0,0);
          printf("Buzz Mission %d: %d %d\n",cs++,cntcomp,res);
         }
         else
         {
             printf("Buzz Mission %d: %d No\n",cs++,cntcomp);
         }
    }
}
 
 
