Explantion: greedly we can separate the component in two steps by removing next 2 cells of leftmost upmost cell, but if there is
a solution in one step would be better and there will be only when there is articulation point so i will just search for it.

CODE
----
#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask)     {mask &= (mask-1);++ret;    }return ret;}
const int N=53;
const int M=N*N;
vector< string > v;
int n,m;
int mb[N][N],dfsN[M],lwlink[M],timer=1;
vector< vector< int > > g(M);
int art=0,root;
int dr[]={1,0};
int dc[]={0,1};
bool V(int r,int c)
{
    return (r>=0&&r<n&&c>=0&&c<m);
}
void dfs(int no,int p)
{
    dfsN[no]=lwlink[no]=timer++;
    for(int i=0;i<sz(g[no]);i++)
    {
        int nw=g[no][i];

        if(dfsN[nw]==0)
        {
            dfs(nw,no);
            lwlink[no]=min(lwlink[no],lwlink[nw]);

            if(lwlink[nw]>=dfsN[no])
            {
                if(dfsN[no]==1&&root==0)
                    root=1;
                else
                    art=1;
            }
        }
        else if(nw!=p)
            lwlink[no]=min(lwlink[no],dfsN[nw]);
    }
}
int main()
{
    cin>>n>>m;
    string st;
    for(int i=0;i<n;i++)
    {
        cin>>st;
        v.pb(st);
    }
    int id=1;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            mb[i][j]=id++;
        }
    }
    int Node=0,cnt=0;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(v[i][j]!='#')
                continue;
            cnt++;
            for(int p=0;p<2;p++)
            {
                int nr=i+dr[p];
                int nc=j+dc[p];

                if(!V(nr,nc)||v[nr][nc]!='#')
                    continue;
                g[mb[i][j]].pb(mb[nr][nc]);
                g[mb[nr][nc]].pb(mb[i][j]);
                Node=mb[i][j];
            }
        }
    }
    if(cnt<3)
    {
        cout<<"-1\n";
        return 0;
    }
    root=0;
    dfs(Node,0);

    if(art)
        cout<<1<<endl;
    else
        cout<<2<<endl;
}























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































