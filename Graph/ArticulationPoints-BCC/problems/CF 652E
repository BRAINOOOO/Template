Explantion: the idea is that i couldn't go through any bridge that it is not in the way from A to B bec i won't be able to return
but the other edges i will be able to go through them bec i will always be able to return or move through them, so i will build
bridge tree and get all the values in the way from A to B.

#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask)     {mask &= (mask-1);++ret;    }return ret;}
typedef pair<int,pair<int,int> > piii;
typedef pair<int,int>  pii;
const int N=300009;
const int M=300009;
int dfsN[N],lwlink[N],Fwe,ans[N],F[M],T[M],W[M],timer,par[N],rnk[N],vis[N];
vector< vector< pii > > v,tree;
vector< piii > B;
vector< int > v1;
vector< vector< piii > > comp;
void I()
{
    timer=1;
    v.resize(N);
    tree.resize(N);
    comp.resize(N);
    for(int i=0;i<N;i++)
        par[i]=i,rnk[i]=1;
}
int getpar(int n)
{
    if(par[n]==n)
        return n;
    return par[n]=getpar(par[n]);
}
void lnk(int a,int b)
{
    a=getpar(a);
    b=getpar(b);
    if(a==b)
        return;
    if(rnk[a]>=rnk[b])
    {
        rnk[a]+=rnk[b];
        rnk[b]=0;
        par[b]=a;
    }
    else
    {
        rnk[b]+=rnk[a];
        rnk[a]=0;
        par[a]=b;
    }
}
void dfs(int no,int p)
{
    dfsN[no]=lwlink[no]=timer++;
    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i].first;
        int w=v[no][i].second;

        if(dfsN[nw]==0)
        {
            dfs(nw,no);
            lwlink[no]=min(lwlink[no],lwlink[nw]);

            if(lwlink[nw]>dfsN[no])
            {
                B.pb(mp(w,mp(no,nw)));
            }
            else
                lnk(no,nw);
        }
        else if(nw!=p)
            lwlink[no]=min(lwlink[no],dfsN[nw]);
    }
}
int dfs2(int no,int tar,int we)
{
    if(no==tar)
    {
        Fwe=we+ans[tar];
        return 1;
    }
    vis[no]=1;
    for(int i=0;i<sz(tree[no]);i++)
    {
        int nw=tree[no][i].first;
        int ww=tree[no][i].second;
        if(vis[nw])
            continue;
        if(dfs2(nw,tar,we+ww+ans[no]))
            return 1;
    }
    return 0;
}
int main()
{
    I();
    int n,m;
    cin>>n>>m;

    for(int i=0;i<m;i++)
    {
        cin>>F[i]>>T[i]>>W[i];
        v[F[i]].pb(mp(T[i],W[i]));
        v[T[i]].pb(mp(F[i],W[i]));
    }
    int AA,BB;
    cin>>AA>>BB;
    dfs(1,0);

    for(int i=0;i<m;i++)
    {
        int f=F[i];
        int t=T[i];
        int w=W[i];
        int ff=getpar(f);
        int tt=getpar(t);

        if(ff==tt)
        {
            vis[ff]++;
            if(vis[ff]==1)
                v1.pb(ff);
            comp[ff].pb(mp(w,mp(f,t)));
        }
    }

    for(int i=0;i<sz(v1);i++)
    {
        int no=v1[i];
        int sum=0;
        for(int j=0;j<sz(comp[no]);j++)
        {
            int w=comp[no][j].first;
            sum+=w;
        }
        ans[no]=sum;
    }
    int Node=-1;
    for(int i=0;i<sz(B);i++)
    {
        int f=B[i].second.first;
        int t=B[i].second.second;
        int w=B[i].first;

        f=getpar(f);
        t=getpar(t);

        tree[f].pb(mp(t,w));
        tree[t].pb(mp(f,w));
    }

    clr(vis,0);
    dfs2(getpar(AA),getpar(BB),0);

    if(Fwe>0)
        cout<<"YES\n";
    else
        cout<<"NO\n";


}






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































