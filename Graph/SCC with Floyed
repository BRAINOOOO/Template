 
vector< vector<int> > SCC()
{
    vector<int> comp(n, -1);
 
    int cnt = 0;
    lp(i, n) if(comp[i]==-1) {
        comp[i] = cnt++;
        lp(j, n) if(adj[i][j] < OO && adj[j][i] < OO) // transitive clusre is enough
            comp[j] = comp[i];
    }
 
    vector< vector<int> > compGraph(cnt, vector<int>(cnt));
 
    lp(i, n) lp(j, n)   if(adj[i][j] < OO)
        compGraph[ comp[i] ][ comp[j] ] = 1;    // DAG
 
    return compGraph;
}
 
Take care here the diagonal will be equal to one




