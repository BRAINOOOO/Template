-Articulation points: if i have an undirected connected graph, is the point that if i removed it the graph will be no longer connected 
it is like the bridge but here it is a node.
Notes
1- if the graph have bridges then off course it will have articulation points but if it haven't that doesn't mean it hasn't articulation 
points eg case  1-2 2-3 3-4 4-1 1-5 5-6 6-1 here node 1 is articulation point and the graph have no bridges.
2- the articulation point can't be a leaf.
3- the articulation point means that its childrens can't go to another component without moving through it.
4- so if the lwlink[nw] >= dfsN[no] then (no) is an articulation point.
5- but there is a problem which is the root will always satisfy this role and the root may be not an articulation point, okay to deal with 
that we have to introduce BiConnectedComponents (BCC) so learn it below first, okay if the root member of more than 2 BCC then it is
an articulation point else it is not.

BiConnected Components (BCC): it is a component of nodes that doesn't contain any articulation point so when i remove any node from it, it
remains connected, when i get a graph and remove all the articulation points in it the graph will be divided in to some BCCs.
BCC properties
1- an edge is a BCC
2- there is 2 vertex disjoint paths between two vertexes, so there is a simple cycle between two vertexes.
the BCC function is very large 10 nodes can create 9,000,000 BCCs

CODE for getting the articulation points
// this code assume that the graph is connected and there is no multiple edges or self loops.
int timer=0;
set< int > articulation;  // i will use set bec the same node may enter various times
bool root=false;
void dfs(int no,int par)
{
    dfsN[no]=lwlink[no]=timer++;
    
    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i];
        if(dfsN[nw]==-1)
        {
            dfs(nw,no);
            lwlink[no]=min(lwlink[no],lwlink[nw]);
            if(lwlink[nw]>=dfsN[no])
            {
                if(dfsN[no]==0&&root==false)
                    root=true;
                else
                articulation.insert(no);
            }
        }
        else if(nw!=p)
            lwlink[no]=min(lwlink[no],dfsN[nw]);
    }
}
---------------------------------------------------------------
CODE for getting the BCCs
Note
- Every entrance in if(dfsN[nw]==-1) this condition means that the no node is involved in a new BCC.
- i assume that there is multiple edges.
- i assume that the root is articulation point, if not just remove its component.
- i will use set bec the same node may enter various times.

const int N=100009;
int timer=0;
set< int > articulation;  
stack< pair<int,int> > comp;
int vis[N];
bool root=false;
void dfs(int no,int par)
{
    dfsN[no]=lwlink[no]=++timer;
    
    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i].first;
        int edgeid=v[no][i].second;
        if(vis[edgeid]==0)
         comp.push(mp(no,nw));
        vis[edgeid]=1;
        
        if(dfsN[nw]==-1)
        {
            dfs(nw,no);
            lwlink[no]=min(lwlink[no],lwlink[nw]);
            if(lwlink[nw]>=dfsN[no])
            {
                if(dfsN[no]==0&&root==false)
                    root=true;
                else
                articulation.insert(no);
                
                do
                {
                    int F=comp.top().first; int S=comp.top().second;
                    comp.pop();
                    
                }
                while(!(F==no&&S==nw))
                
            }
        }
        else if(vis[edgeid]==0)
            lwlink[no]=min(lwlink[no],dfsN[nw]);
    }
}
// n nodes, m edges, nodes from 1 to n
int main()
{
    cin>>n>>m;
    
    for(int i=0;i<m;i++)
    {
        cin>>f>>t;
        v[f].pb(mp(t,i));
        v[t].pb(mp(f,i));
    }
    dfs(1,0);
}
----------------------------------------------------------------------------------------------------------------------------------------
Link: https://en.wikipedia.org/wiki/Biconnected_component
- Block-Cut Tree: Every graph can be represented as a Block Cut tree, every graph can be presented as articulation points connecting
biconnected components and the block cut tree connects the articulation point with the biconnected components that it connects.
CODE
----
vector<int> grafo[MAXN];
vector<int> arvore[MAXN];
vector<int> blockCut[MAXN];
vector<vector<int> > perdi;
stack<int> pilha;
void get_bcc(int idx)
{
	vector<int> componente;
	while(!pilha.empty())
        {
		int davez = pilha.top();
		pilha.pop();
		componente.push_back(davez);
		if(davez == idx) break;
	}
	perdi.push_back(componente);
}
void dfs_tarjan(int v,int p)
{
	num[v] = low[v] = ++dfsCount;
	int children = 0;
	for(int i = 0;i<grafo[v].size();i++)
        {
		int idx = grafo[v][i];
		int u = (e1[idx] != v) ? e1[idx] : e2[idx];
		if(u == p) 
		continue;
    
		if(num[u] == 0)
                {
			children++;
			pilha.push(idx);
			dfs_tarjan(u,v);
			if(low[u] > num[v])
			 isbridge[idx] = 1;
        
			if(low[u] >= num[v])
			{
				articulation[v] = 1;
				get_bcc(idx);
			}
			low[v] = min(low[v],low[u]);
		}
		else
               {
			low[v] = min(low[v],num[u]);
		}
	}
	if(p == -1)
        {
		articulation[v] = (children > 1);
	}
}
int main()
{
    // n nodes from 1 to n
    // m edges
	cin>>n>>m;
	for(int i = 1;i<=m;i++)
        {
		cin>>e1[i]>>e2[i];
		grafo[e1[i]].push_back(i);
		grafo[e2[i]].push_back(i);
	}
	dfs_tarjan(1,-1);
	// blockComp intially = 0
	for(int i = 1;i<=n;i++)
        {
		if(articulation[i]) 
		biconnectedId[i] = ++blockComp;
	}
	while(!perdi.empty())
	{
		vector<int> componente = perdi.back();
		perdi.pop_back();
		blockComp++;
		for(int pos = 0;pos<componente.size();pos++){
			int u = e1[componente[pos]],v = e2[componente[pos]];
			if(!articulation[u]) biconnectedId[u] = blockComp;
			if(!articulation[v]) biconnectedId[v] = blockComp;
			if(articulation[u]){
				blockCut[biconnectedId[u]].push_back(blockComp);
				blockCut[blockComp].push_back(biconnectedId[u]);
			}
			if(articulation[v]){
				blockCut[biconnectedId[v]].push_back(blockComp);
				blockCut[blockComp].push_back(biconnectedId[v]);
			}
		}
	}
	for(int i = 1;i<=blockComp;i++)
	{
		sort(blockCut[i].begin(),blockCut[i].end());
		blockCut[i].erase(unique(blockCut[i].begin(),blockCut[i].end()),blockCut[i].end());
	}
}

----------------------------------------------------------------------------------------------------------------------------------------








































