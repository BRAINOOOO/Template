/*
A bridge: is an edge in an undirected graph that doesn't involve in any cycle and if i cut it the number of connected components 
increased by one, it is just like a real bridge between a cycle or multiple cycles inside each other.
bridge tree: Bridge tree is the tree that consists only of all the bridges that is in the graph by compressing all the cycles.

Getting the bridge edges: the idea is that if edge u to v is a bridge edge so the lowlink of v must not be less than the dfsN of u.
getting bridge tree: by using DSU every non bridge edge will be linked to each other and the bridge edges won't be linked so by just 
getting the parent of each node of the bridge edges we can build the bridge tree.

CODE
void dfs(int no,int pre)
{
    lwlink[no]=dfsN[no]=F++;

    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i];
        if(dfsN[nw]==0)
        {
            dfs(nw,no);
            lwlink[no]=min(lwlink[no],lwlink[nw]);

            if(lwlink[nw]>dfsN[no])
                bridges.pb(mp(no,nw));
            else
                lnk(no,nw);
        }
        else if(nw!=pre)
            lwlink[no]=min(lwlink[no],dfsN[nw]);

    }
}
void bridgetree()
{

    for(int i=0;i<N;i++)
        par[i]=i,rnk[i]=1;

    dfs(1,-1);
    for(int i=0;i<sz(br);i++)
    {
        int x=getpar(bridges[i].first);
        int y=getpar(bridges[i].second);
        BridgeTree[x].pb(y);
        BridgeTree[y].pb(x);
    }

}
----------------------------------------------------------------------------------------------------------------------------------------
