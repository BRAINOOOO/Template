Solution: to have exactly one path from S to T in the graph then all the path edges must be bridges so i will get all the bridges and 
construct a tree using them and get for each node ID to express the tree it locates at so if S and T have the same ID then there is 
a path between them else no.
const int N=10009;
const int M=100009;
int n,m,S,T,q;
int vis[N],timer=1,dfsN[N],lwlink[N],ID[N],id;
vector< vector< int> >  v,tree;
vector< pair<int,int> > B;
vector<int> v1;
void I()
{
    timer=1;
    clr(vis,0);
    clr(dfsN,0);
    clr(lwlink,0);
    v.clear();
    tree.clear();
    B.clear();
    v.resize(N);
    tree.resize(N);
    v1.clear();
}
void dfs(int no,int p)
{

    dfsN[no]=timer;
    lwlink[no]=timer++;
    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i];

        if(dfsN[nw]==0)
        {
            dfs(nw,no);
            lwlink[no]=min(lwlink[no],lwlink[nw]);
            if(lwlink[nw]>dfsN[no])
                B.pb(mp(no,nw));
        }
        else if(nw!=p)
        {
           lwlink[no]=min(lwlink[no],lwlink[nw]);
        }
    }
}
void dfs2(int no)
{
    ID[no]=id;
    vis[no]=1;
    for(int i=0;i<sz(tree[no]);i++)
    {
        int nw=tree[no][i];
        if(vis[nw])
            continue;
        dfs2(nw);
    }
}
int main()
{
  while(cin>>n>>m>>q)
  {
      I();
      if(n==0)
        break;

    int f,t;
    for(int i=0;i<m;i++)
    {
        cin>>f>>t;
        v[f].pb(t);
        v[t].pb(f);
    }
    for(int i=1;i<=n;i++)
        if(dfsN[i]==0)
         dfs(i,0);

    for(int i=0;i<sz(B);i++)
    {
        int f=B[i].first;
        int t=B[i].second;
        tree[f].pb(t);
        tree[t].pb(f);

    }
    clr(vis,0);
    id=0;
    for(int i=1;i<=n;i++)
    {
        if(vis[i]==0)
        {
            id++;
            dfs2(i);
        }
    }

    while(q--)
    {
        cin>>S>>T;
        if(ID[S]!=ID[T])
            cout<<'N'<<endl;
        else
            cout<<'Y'<<endl;
    }
    cout<<'-'<<endl;
  }


}
----------------------------------------------------------------------------------------------------------------------------------------
