solution: first if i will add one edge so i will need to let this edge cause a cycle and this cycle contains at much as possible 
bridges so i am talking a bout the tree diameter of the bridge tree i will connect this edge between the two ends of the tree diameter
so i will be losing length of diameter bridges from the intial bridges.

CODE
----
const int N=100009;
int vis[N],dfsN[N],lwlink[N],par[N],rnk[N],F;
vector< vector<int> > tree,v;
vector<pair<int,int> > b;
int getpar(int n)
{
    if(par[n]==n)
        return n;
    return par[n]=getpar(par[n]);
}
void I()
{
    F=1;
    clr(dfsN,0);
    clr(lwlink,0);
    v.clear();
    v.resize(N);
    b.clear();
    tree.clear();
    tree.resize(N);
    for(int i=1;i<N;i++)
        par[i]=i,rnk[i]=1;
    clr(vis,0);
}
void lnk(int a,int b)
{
    a=getpar(a);
    b=getpar(b);
    if(a!=b)
    {
        if(rnk[a]>rnk[b])
        {
            rnk[a]+=rnk[b];
            par[b]=a;
        }
        else
        {
            rnk[b]+=rnk[a];
            par[a]=b;
        }
    }
}
void dfs(int no,int pre)
{
    dfsN[no]=F;
    lwlink[no]=F++;

    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i];
        if(dfsN[nw]==0)
        {
            dfs(nw,no);
            lwlink[no]=min(lwlink[no],lwlink[nw]);
            if(lwlink[nw]>dfsN[no])
            {
                b.pb(mp(no,nw));
            }
            else
            {
                lnk(no,nw);
            }

        }
        else if(nw!=pre)
        {
            lwlink[no]=min(lwlink[no],lwlink[nw]);
        }
    }

}
int mx,Node2;
void dfs1(int no,int l)
{
    if(l>=mx)
    {
      mx=l;
      Node2=no;
    }
    vis[no]=1;
    for(int i=0;i<sz(tree[no]);i++)
    {
        int nw=tree[no][i];
        if(vis[nw])
            continue;
        dfs1(nw,l+1);
    }
}
int main()
{
    M();
    int T;
    cin>>T;
    while(T--)
    {
        I();
        int n,m;
        cin>>n>>m;

        for(int i=0;i<m;i++)
        {
            int f,t;
            cin>>f>>t;
            v[f].pb(t);
            v[t].pb(f);

        }

        dfs(1,0);
        int Node1=0;
        int ans=sz(b);
        for(int i=0;i<sz(b);i++)
        {
            int f=getpar(b[i].first);
            int t=getpar(b[i].second);

            tree[f].pb(t);
            tree[t].pb(f);
            Node1=f;
        }
        mx=0;
        dfs1(Node1,0);
        clr(vis,0);
        mx=0;
        dfs1(Node2,0);

        ans-= mx;
        cout<<ans<<endl;
    }
}
