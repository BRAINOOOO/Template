Solution: to make all the nodes good there must no bridges at all, okay i am allowed to put one extra edge if this edge could make all the
bridges go in a cycle so there will be no bridges so the answer is yes else the answer is no.

CODE
----
const int N=200009;
int lwlink[N],dfsN[N],par[N],rnk[N],F=1,vis[N];
vector< vector<int> > v(N),tree(N);
vector< pair<int,int> > b;
map< pair<int,int>,int> ed;
void I()
{
    for(int i=0;i<N;i++)
        par[i]=i,rnk[i]=1;
}
int getpar(int n)
{
    if(par[n]==n)
        return n;
    return par[n]=getpar(par[n]);
}
void lnk(int a,int b)
{
    a=getpar(a);
    b=getpar(b);
    if(a!=b)
    {
        if(rnk[a]>rnk[b])
        {
            rnk[a]+=rnk[b];
            rnk[b]=0;
            par[b]=a;
        }
        else
        {
            rnk[b]+=rnk[a];
            rnk[a]=0;
            par[a]=b;
        }
    }
}
void dfs(int no,int p)
{
    dfsN[no]=F;
    lwlink[no]=F++;

    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i];
        if(dfsN[nw]==0)
        {
            dfs(nw,no);
            lwlink[no]=min(lwlink[no],lwlink[nw]);

            if(lwlink[nw]>dfsN[no])
            {
                b.pb(mp(no,nw));
            }
            else
            {
                lnk(no,nw);
            }
        }
        else if((nw!=p)||(nw==p&&ed[mp(no,nw)]>1))
        {
            lwlink[no]=min(lwlink[no],lwlink[nw]);
        }
    }

}
int Node2,mx;
void dfs2(int no,int l)
{
    if(l>=mx)
    {
        mx=l;
        Node2=no;
    }
    vis[no]=1;
    for(int i=0;i<sz(tree[no]);i++)
    {
        int nw=tree[no][i];
        if(vis[nw])
            continue;
        dfs2(nw,l+1);
    }
}
int main()
{
    I();
    int n,m;
    cin>>n>>m;

    for(int i=0;i<m;i++)
    {
        int f,t;
        cin>>f>>t;

        v[f].pb(t);
        v[t].pb(f);
        ed[mp(t,f)]++;
        ed[mp(f,t)]++;
    }
    dfs(1,0);
    int cnt=0,Node1=0;
    for(int i=0;i<sz(b);i++)
    {
        int f=getpar(b[i].first);
        int t=getpar(b[i].second);
        tree[f].pb(t);
        tree[t].pb(f);
        Node1=f;
        cnt++;
    }
    mx=0;
    dfs2(Node1,0);
    clr(vis,0);
    mx=0;
    dfs2(Node2,0);

    if(cnt==mx)
    {
        cout<<"YES\n";
    }
    else
    {
        cout<<"NO\n";
    }
}

