/*
explantion: the idea is that each edge may intersect with some other edges at that case both edges can't be inside or out side 
which is equal to (let ith edge expressed as i*2 and its not as i*2+1) ( (i*2 or j*2) and (i*2+1 || j*2+1) )  
i will do this equation ans see if it is sat or not and if yes i will assign the values.
*/
#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask)     {mask &= (mask-1);++ret;    }return ret;}
const int N=209;
int lwlink[N],dfsN[N],instack[N],vis[N],nodecomp[N],mark[N],comp_root[N],timer=1,asign[N],F[N],T[N];
stack<int> stk;
vector< vector< int > > v(N),comp;
vector<int> topo;
void addor(int a,int b)
{
    v[a^1].pb(b);
    v[b^1].pb(a);
}
void dfs(int no)
{
    dfsN[no]=lwlink[no]=timer++; instack[no]=1;
    stk.push(no);
    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i];
        if(dfsN[nw]==0)
        {
            dfs(nw);
            lwlink[no]=min(lwlink[no],lwlink[nw]);
        }
        else if(instack[nw]==1)
            lwlink[no]=min(lwlink[no],dfsN[nw]);
    }
    if(dfsN[no]==lwlink[no])
    {
        int x=-1;
        comp.pb(vector<int>());
        while(x!=no)
        {
            x=stk.top(); stk.pop(); nodecomp[x]=sz(comp)-1;
            comp.back().pb(x); instack[x]=0;
        }
    }
    comp_root[nodecomp[no]]=no;
}
void dfs2(int no)
{
    vis[no]=1;
    for(int i=0;i<sz(comp[no]);i++)
    {
        int nw=comp[no][i];
        for(int j=0;j<sz(v[nw]);j++)
        {
            int nwc= nodecomp[v[nw][j]];
            if(vis[nwc])
                continue;
            dfs2(nwc);
        }
    }
    topo.pb(no);
}
bool issat(int n)
{
    for(int i=2;i<=n*2;i+=2)
        if(nodecomp[i]==nodecomp[i^1])
        return 0;
    return 1;
}
void solve(int n)
{
    for(int i=0;i<sz(topo);i++)
    {
        int nw=topo[i];
        if(mark[nw]==-1)
        {
            mark[nw]=1;
            mark[ nodecomp[comp_root[nw]^1] ]=0;
        }
    }
    for(int i=2;i<=2*n;i+=2)
        asign[i]=mark[nodecomp[i]];
}
bool check(int i,int j)
{
    int str= min(F[i],T[i]);
    int en= max(F[i],T[i]);
    if((F[j]>str&&F[j]<en)&&(!(T[j]>=str&&T[j]<=en)))
        return 1;
    if((T[j]>str&&T[j]<en)&&(!(F[j]>=str&&F[j]<=en)))
        return 1;
    return 0;
}
int main()
{
    int n,m;
    cin>>n>>m;
    for(int i=1;i<=m;i++)
    {
        cin>>F[i]>>T[i];
    }
    for(int i=1;i<=m;i++)
    {
        for(int j=i+1;j<=m;j++)
        {
            if(check(i,j))
            {
                addor(i*2,j*2);
                addor(i*2+1,j*2+1);
            }
        }
    }
    for(int i=2;i<=2*m+1;i++)
        if(dfsN[i]==0)
         dfs(i);
    if(issat(m)==0)
    {
        cout<<"Impossible\n";
        return 0;
    }
    for(int i=0;i<sz(comp);i++)
        if(vis[i]==0)
          dfs2(i);
    clr(mark,-1);
    solve(m);
    for(int i=1;i<=m;i++)
    {

        if(asign[i*2]==1)
            cout<<'i';
        else
            cout<<'o';
    }
    cout<<endl;
}
