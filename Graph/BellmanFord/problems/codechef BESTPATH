/*
Explanation: suppose the node i want to get the min walk including it x, i will get the min path to x and the min path from x this will 
be the min walk including it and if there is a -ve cycle to x or from x then the answer is inf, okay now how could i get the min path to 
x let an extra node S and connect it to all nodes with weight zero then the min dist to x from S is the min path to x and how i could
get the min path from x okay reverse the graph edges directions and get the min dist from S to node x it will be the min distance from
node x.
*/
#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask)     {mask &= (mask-1);++ret;    }return ret;}
const int N=1009;
const int OO=INT_MAX;
int n,m,d,in[N],re[N],mark[N],vis[N];
int dist[2][N];
int f[N],t[N],k[N];
vector< vector< pair<int,int> > > v;
void I()
{
    v.clear();
    v.resize(N);
    clr(mark,0);
}
void bfs(int s)
{
    queue<int> q;
    q.push(s);
    mark[s]=1;
    vis[s]=1;
    while(!q.empty())
    {
        int no=q.front();
        q.pop();

       for(int i=0;i<sz(v[no]);i++)
       {
          int nw= v[no][i].first;
          if(vis[nw])
            continue;
          vis[nw]=1;
          mark[nw]=1;
          q.push(nw);
       }
    }
}
void solve(int s,int f)
{
    for(int i=0;i<=n;i++)
        dist[f][i]=OO;
    clr(in,0);
    clr(re,0);
    queue<int> q;
    q.push(s);
    in[s]=1;
    dist[f][s]=0;
    int L=n+4;
    while(!q.empty())
    {
        int no=q.front();
        q.pop();
        in[no]=0;
        if(re[no]>=L)
            continue;
        for(int i=0;i<sz(v[no]);i++)
        {
            int nw=v[no][i].first;
            int we=v[no][i].second;
            if(dist[f][no]>=OO)
                continue;
            if(dist[f][nw]>dist[f][no]+we)
            {

                dist[f][nw]=dist[f][no]+we;
                re[nw]++;
                if(re[nw]>=L)
                {
                    clr(vis,0);
                    bfs(nw);
                }
                else if(in[nw]==0)
                {
                    in[nw]=1;
                    q.push(nw);
                }
            }
        }
    }
}

int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        cin>>n>>m;
        I();
        for(int i=0;i<m;i++)
        {
            cin>>f[i]>>t[i]>>k[i];
            v[f[i]].pb(mp(t[i],k[i]));
        }
        for(int i=1;i<=n;i++)
            v[0].pb(mp(i,0));
        solve(0,0);
        v.clear();
        v.resize(N);

        for(int i=0;i<m;i++)
        {
           v[t[i]].pb(mp(f[i],k[i]));
        }
        for(int i=1;i<=n;i++)
            v[0].pb(mp(i,0));
        solve(0,1);
       for(int i=1;i<=n;i++)
       {
           if(mark[i])
            cout<<"INF\n";
           else
            cout<<dist[0][i]+dist[1][i]<<endl;
       }
    }
}

