/*
Explanation: the idea is to check if there is a node in a negative cycle or not if there is then answer is yes else the answer will be no.
*/
#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask)     {mask &= (mask-1);++ret;    }return ret;}
const int N=109;
int n,m,vis[N],re[N],in[N],mark[N],dist[N],par[N],incycle[N],taken[N];
vector< vector< pair<int,int> > > v;
void I()
{
    clr(mark,0);
    v.clear();
    v.resize(N);
    clr(re,0);
    clr(in,0);
    clr(par,-1);
    clr(incycle,0);
}
void bfs(int no)
{
    queue<int> q;
    q.push(no);
    vis[no]=1; mark[no]=1;
    while(!q.empty())
    {
        int fr=q.front();
        q.pop();

        for(int i=0;i<sz(v[fr]);i++)
        {
            int nw=v[fr][i].first;
            if(vis[nw])
                continue;
            mark[nw]=1;
            vis[nw]=1;
            q.push(nw);
        }
    }
}
void getcycle(int no)
{
    int fl=0;
    for(int i=no;i!=-1;i=par[i])
    {
        if(i==no&&fl==1)
            break;
        fl=1;
        incycle[i]=1;
    }
}
void go(int no)
{
    int tvis[N];
    clr(tvis,0);
    for(int i=no;i!=-1;i=par[i])
    {
        if(tvis[i])
        {
            getcycle(i);
            break;
        }
        tvis[i]=1;
    }

}
void tI()
{
    for(int i=0;i<n;i++)
        dist[i]=INT_MAX;
    clr(in,0);
    clr(re,0);
    clr(mark,0);
    clr(par,-1);
    clr(taken,0);
}
void solve(int s)
{

    queue<int> q;
    q.push(s);
    taken[s]=1;
    in[s]=1;
    dist[s]=0;
    int L=n*2+2;

    while(!q.empty())
    {
        int no=q.front();
        q.pop();
        taken[no]=1;
        in[no]=0;

        if(re[no]>=L)
            continue;
        for(int i=0;i<sz(v[no]);i++)
        {
            int nw=v[no][i].first;
            int we=v[no][i].second;
            if(dist[no]>=INT_MAX)
                continue;
            if(dist[nw]>dist[no]+we)
            {
                dist[nw]=dist[no]+we;
                par[nw]=no;
                re[nw]++;
                if(re[nw]==L)
                {
                    clr(vis,0);
                    bfs(nw);
                }
                else if(in[nw]==0)
                {
                    in[nw]=1;
                    q.push(nw);
                }
            }
        }
    }


    for(int i=0;i<n;i++)
    {
        if(mark[i]==1)
        {
            go(i);
        }
    }
}
int main()
{

    while(cin>>n>>m)
    {
        if(n==0&&m==0)
            break;
        I();

        for(int i=0;i<m;i++)
        {
            int fr,to,we;
            cin>>fr>>to>>we;
            fr--; to--;
            v[fr].pb(mp(to,we));
            v[to].pb(mp(fr,-we));
        }
        tI();
        for(int i=0;i<n;i++)
          if(taken[i]==0)
           solve(i);
       int ret=0;
       for(int i=0;i<n;i++)
         ret|=(incycle[i]);
        if(ret)
            cout<<"Y\n";
        else
            cout<<"N\n";
    }
}
