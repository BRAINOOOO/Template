/*
the idea is i can't move from a node where the path to it is not positive and i will try to find the max path if i reached the target
with positive value then it is winnable but if i couldn't then i will check for each node in a positive cycle if there is a way from it to
the target then it is winnable else it is hopeless.

Notes about implementation
1- i multiplied the costs with -1 to minmize instead of maximizing.
2- the algorithsm used for shortest path not bellman but it can be bellman but i used SPFA.
*/
#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask)     {mask &= (mask-1);++ret;    }return ret;}
const ll OO=INT_MAX;
const ll N=109;
ll arr[N],vis[N],dist[N],n,in[N];
vector< vector<int> > v(N);
void I()
{
    v.clear();
    v.resize(N);
}
bool dfs(int no,int des)
{
    if(no==des)
        return 1;
    vis[no]=1;
    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i];
        if(vis[nw])
            continue;
        bool ret=dfs(nw,des);
        if(ret)
            return 1;
    }
    return 0;
}


int solve(int s,int t)
{
    for(int i=1;i<=n;i++)
        dist[i]=OO;
    dist[s]=-100;
    queue<int> q;
    clr(in,0);
    q.push(s);
    in[s]=1;
    int T=n+1;
    while(!q.empty()&&T--)
    {
        int no=q.front();
        q.pop();
       // in[no]=0;
        for(int i=0;i<sz(v[no]);i++)
        {
            int nw=v[no][i];

            if(dist[no]>=0)
                continue;

            if((dist[no]+arr[nw])<0&&dist[nw]>dist[no]+arr[nw])
            {
                dist[nw]=dist[no]+arr[nw];
                if(in[nw]==0)
                {
                   q.push(nw);
                   in[nw]=1;
                }
            }
        }
    }

    if(dist[t]<0)
        return 1;

    for(int i=1;i<=n;i++)
    {
        for(int j=0;j<sz(v[i]);j++)
        {
            int nw=v[i][j];
            if(dist[i]>=0)
                continue;
            if(dist[i]+arr[nw]<0&&dist[nw]>dist[i]+arr[nw])
            {
                clr(vis,0);
                int ret=dfs(nw,t);
                if(ret)
                    return 1;
            }
        }
    }
    return 0;
}

int main()
{
    while(cin>>n)
    {
        if(n==-1)
            break;
        I();
        for(int i=1;i<=n;i++)
        {
            cin>>arr[i];
            arr[i]*=-1;
            int num;
            cin>>num;
            for(int j=0;j<num;j++)
            {
                int no;
                cin>>no;
                v[i].pb(no);
            }
        }

        int source=1;
        int des=n;
        bool ret= solve(source,des);
     //cout<<ret.first<<" ";
        if(ret)
            cout<<"winnable\n";
        else
            cout<<"hopeless\n";
    }
}
