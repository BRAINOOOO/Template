/*

Polygon perimeter : is the sum of all the polygon sides
----------------------------------------------------------------------------------------------------------------------------------------
The area of a triangle ABC  is Cross product of AB and AC vectors divided by 2
             C 
            / \
           /   \
          /     \
         A       B
If Cross Product of two vectors is -ve this means its concave    |
                                   +ve  this means its convex    |----> this bec of sin in cross product defination
                                   Zero this means its collinear |

So Now we can get the Triangle area but what about the general polygon area, So we will make Triangulation ( divide the general polygon to
Triangles by setting a point O which is orgin in the orgin of the Polygon ) and compute the area of each and sum up.
// leave the -ve area as its bec it will cancel the extra area.
// works with all kinds of Polygons 
// works in case of multiple points or collinear points

CODE    it is idea named by sholace formula
-----
double polygonArea(vector<point>& points) 
{
    long double a = 0;
    for(int i=0;i<=sz(points);i++) 
        a += cp(points[i], points[ (i+1) % sz(points) ]);
    
    return fabs(a/2.0);    // If area > 0 then points ordered CCW else its CW
}
-------------------------------------------------------------------------------------------------------------------------------------------
pick's theorem and polygon area
-------------------------------
If i have a simple Polygon with integer vertices 
Area of Polygon = boundry points/2 + inner points -1
And as explained before you can get the area of the polygon so We can get the inner points
boundry points = r

CODE to get r

        for(int i=0;i<=n;i++)   // n points
       {
           point cur=v[(i%sz(v))];
           x=cur.real(); y=cur.imag();
           if(i!=0)
           {
               ll x1=prev.real(); ll y1=prev.imag();
               ll x2=x;     ll y2=y;

              if(y2-y1==0)
                  r+= abs(x2-x1)+1;
              else if(x2-x1==0)
                  r+= abs(y2-y1)+1;
              else
              {
                 r+=  __gcd(abs(y2-y1),abs(x2-x1));
                 r+=1;
              }
           }
           prev=cur;
       }
        r-=n;
----------------------------------------------------------------------------------------------------------------------------------------
Shape Centriod ( center of mass and gravity )
is like when you want to put a picture on a wall with a bin and yu want to put the bin in a position to be balanced this pen is the 
centriod.
Triangle Centriod
-----------------
      C
     /\        Two ways to get it
    /  \       1- draw a line between the midpoint of AC to B and from midpoint of CB to A and from midpoint of AB to C
   /  . \        the centeriod is the point of intersection of those three lines .
 A/______\B    2- the X co-ordinate of Centriod point is the sum of all Xs of vertces divided by three and the
                  Y co-ordinate of Centriod point is the sum of all Ys of vertces divided by three .

Polygon centriod
----------------
Make triangulation for the polygon 
let the centriod point X co-cordinate be x and the centriod point Y co-cordinate be y

x=  sum  Cix*Ai / sum Ai         y=  sum  Ciy*Ai / sum Ai

where  Ai is the area of ith triangle and Cix is the x co-ordinate of the ith triangle centriod and Ciy is the y co-ordinate 
of the ith triangle centriod.

CODE
----

point polygonCenteriod(vector<point> points) 
{
  double x = 0, y = 0, a = 0, c;

  for(int i = 0; i < points.size(): ++i)
  {
	int j = (i + 1) % sz(points);
	c = cp(points[i], points[j]), a += c;
	x += (points[i].X + points[j].X) * c;
	y += (points[i].Y + points[j].Y) * c;
  }
  if (dcmp(a, 0) == 0)
	return (points[0] + points.back()) * 0.5;   // Line
  a /= 2, x /= 6 * a, y /= 6 * a;
  
  // Fix values in case
  if (dcmp(x, 0) == 0)	x = 0;
  if (dcmp(y, 0) == 0)	y = 0;

  return point(x, y);
}
--------------------------------------------------------------------------------------------------------------------------------------
Convex Polygon Cut with a line 
------------------------------
// using Cross product we can know whether the point is above the cutting line or below it 

// P need to be counterclockwise convex polygon if its with CW swap left and right vectors
pair<vector<point>, vector<point> > polygonCut(vector<point> &p, point A, point B)
{
		
  vector<point> left, right;
  point intersect;

  for (int i = 0; i < sz(p); ++i) 
  {
	point cur = p[i], nxt = p[(i + 1) % sz(p)];

	if ( cp(B-A, cur-A) >= 0)
	  right.push_back(cur);

	//NOTE adust intersectSegments should handled AB as line
  
	if (intersectSegments(A, B, cur, nxt, intersect))
  {  
	  right.push_back(intersect);
	  left.push_back(intersect);
	}

	if ( cp(B-A, cur-A) <= 0)
	  left.push_back(cur);
  }
  return make_pair(left, right);
}

----------------------------------------------------------------------------------------------------------------------------------------
Point in polygon 
the idea is to do horizontal line to the +ve x-axies if the line passes by edge going down so yu will count -1 but if the edge going up
yu will count +1 but you have to check that it doesn't passes by another horizontal line.

CODE

bool isPointOnSegment(point a, point b, point c)
{
	double acb = length(a-b), ac = length(a-c), cb = length(b-c);
	return dcmp(acb-(ac+cb), 0) == 0;
}

// Accurate and efficient
int isInsidePoly(vector<point> p, point p0) 
{
  int wn = 0;  // the winding number counter

  for (int i = 0; i < sz(p); i++)
  {
	point cur = p[i], nxt = p[(i + 1) % sz(p)];
	
	if (isPointOnSegment(cur, nxt, p0))    // instead you can make this check if (ccw(cur, nxt, pt) == 0)return 1;
	  return true;
	if (cur.Y <= p0.Y) 
	{                                                 // Upward edge
	  if (nxt.Y > p0.Y && cp(nxt-cur, p0-cur) > EPS)
		++wn;
	} 
	else 
	{                                                 // Downward edge
	  if (nxt.Y <= p0.Y && cp(nxt-cur, p0-cur) < -EPS)
		--wn;
	}
  }
  return wn != 0;
}

Notes
- in case there is much queries you can first create a rectangle around the polygon and check if its inside it so go and check 
for polygon else don't check for the polygon.
----------------------------------------------------------------------------------------------------------------------------------------
